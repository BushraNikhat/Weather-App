{"version":3,"sources":["Components/TempCard.jsx","App.jsx","index.js"],"names":["TempCard","props","useState","city","setCity","country","setCountry","temperature","setTemperature","now","minute","hour","date","month","period","dayToday","apiKey","useEffect","a","Axios","get","then","response","data","main","sys","catch","err","getCity","className","type","placeholder","value","onChange","e","target","id","temp","temp_min","temp_max","App","setNow","setInterval","Date","day","getDay","mon","getMonth","dateToday","getDate","hours","getHours","periodNow","min","getMinutes","prevVal","ReactDOM","render","document","getElementById"],"mappings":"wOAgGeA,EA5FE,SAACC,GAAW,IAAD,EAGFC,mBAAS,SAHP,mBAGnBC,EAHmB,KAGbC,EAHa,OAMIF,mBAAS,IANb,mBAMnBG,EANmB,KAMVC,EANU,OAOYJ,mBAAS,IAPrB,mBAOnBK,EAPmB,KAONC,EAPM,OAU8BP,EAAMQ,IAAtDC,EAVkB,EAUlBA,OAAQC,EAVU,EAUVA,KAAMC,EAVI,EAUJA,KAAMC,EAVF,EAUEA,MAAOC,EAVT,EAUSA,OAAQC,EAVjB,EAUiBA,SAGrCC,EAAS,mCAyBf,OAvBAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,sEACQC,IAAMC,IAAN,4DACiDjB,EADjD,+BAC4Ea,IAE/EK,MAAK,SAACC,GAELd,EAAec,EAASC,KAAKC,MAC7BlB,EAAWgB,EAASC,KAAKE,QAK1BC,OAAM,SAACC,GAGNnB,EAAe,SAfrB,4CADc,uBAAC,WAAD,wBAoBdoB,KACA,CAACzB,IAGD,mCACE,qBAAK0B,UAAU,6DAAf,SACE,qBAAKA,UAAU,2BAAf,SACE,sBAAKA,UAAU,YAAf,UAEE,qBAAKA,UAAU,0DAAf,SACE,uBACEC,KAAK,SACLC,YAAY,aACZF,UAAU,yBACVG,MAAO7B,EACP8B,SAAU,SAACC,GACT9B,EAAQ8B,EAAEC,OAAOH,YAKrBzB,EAGA,8BAEE,sBAAKsB,UAAU,iBAAf,UACE,sBAAKA,UAAU,4EAAf,UACE,qBAAIA,UAAU,OAAOO,GAAG,QAAxB,UACE,mBAAGP,UAAU,+BACb,iCACG1B,EADH,IACUE,EAAQA,cAGpB,oBAAGwB,UAAU,OAAOO,GAAG,cAAvB,UACGrB,EADH,MACgBF,EADhB,IACwBD,EADxB,MACiCD,EADjC,KACyCD,EADzC,IACkDI,QAGpD,sBAAKe,UAAU,2EAAf,UACE,qBAAIA,UAAU,OAAOO,GAAG,OAAxB,UACG7B,EAAY8B,KADf,YAGA,oBAAGR,UAAU,OAAOO,GAAG,UAAvB,iBACO7B,EAAY+B,SADnB,eAC0C/B,EAAYgC,SADtD,mBApBN,mBAAGV,UAAU,yCAAb,qCCgBCW,EAzEH,WAAM,MAGGtC,mBAAS,CAC1BQ,OAAO,GACPC,KAAK,GACLC,KAAK,GACLC,MAAM,GACNC,OAAO,GACPC,SAAS,KATK,mBAGTN,EAHS,KAGLgC,EAHK,KAgEjB,OAJKC,aA9Ca,WACT,IAAM9B,EAAK,IAAI+B,KAELC,EADC,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAC5BhC,EAAKiC,UAGfC,EADS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,MAAM,OACnElC,EAAKmC,YAEhBC,EAAUpC,EAAKqC,UAEfC,EAAMtC,EAAKuC,WACXC,EAAU,KACXF,EAAM,KACLE,EAAU,MAGXF,EAAM,KACLA,GAAY,IAIhB,IAAIG,EAAIzC,EAAK0C,aACVD,EAAI,KACHA,EAAI,IAAIA,GAGlBZ,GAAO,SAACc,GAQJ,OAPAA,EAAQ7C,OAAO2C,EACfE,EAAQ5C,KAAKuC,EACbK,EAAQ3C,KAAKoC,EACbO,EAAQ1C,MAAMiC,EACdS,EAAQxC,SAAS6B,EACjBW,EAAQzC,OAAOsC,EAET,CACF1C,OAAO6C,EAAQ7C,OACfC,KAAK4C,EAAQ5C,KACbC,KAAK2C,EAAQ3C,KACbC,MAAO0C,EAAQ1C,MACfE,SAASwC,EAAQxC,SACjBD,OAAOyC,EAAQzC,aAMH,KAK1B,mCACC,cAAC,EAAD,CAAWL,IAAKA,O,YC/DrB+C,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.bb78093a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\n\r\nconst TempCard = (props) => {\r\n\r\n  \r\n  const [city, setCity] = useState(\"Delhi\");\r\n\r\n  // country and temperature will get set ,whenever there is a good response to the api call.\r\n  const [country, setCountry] = useState(\"\");\r\n  const [temperature, setTemperature] = useState(\"\");\r\n\r\n// object destructuring is used below\r\n  const { minute, hour, date, month, period, dayToday } = props.now;\r\n\r\n\r\n  const apiKey = \"8a6fbc78a296de53aaa6482cd19f3276\";\r\n  // Api will get called each time when user types something in input tag or when the page get refreshed.\r\n  useEffect(() => {\r\n    async function getCity() {\r\n      await Axios.get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`\r\n      )\r\n        .then((response) => {\r\n          \r\n          setTemperature(response.data.main);\r\n          setCountry(response.data.sys)\r\n          \r\n     \r\n     \r\n        })\r\n        .catch((err) => {\r\n         \r\n        \r\n          setTemperature(null);\r\n  \r\n        });  \r\n    }\r\n    getCity();\r\n  },[city]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex justify-content-center align-items-center view-area\">\r\n        <div className=\"card weather-box shadow \">\r\n          <div className=\"card-body\">\r\n\r\n            <div className=\"form-group city-name-div d-flex justify-content-center \">\r\n              <input\r\n                type=\"search\"\r\n                placeholder=\"Enter City\"\r\n                className=\"form-control city-name\"\r\n                value={city}\r\n                onChange={(e) => {\r\n                  setCity(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n            {/* ternary operator is used below,it will show \"no data found\" when there is a bad response and it will show the details when there is good response  */}\r\n            {!temperature ? (\r\n              <p className=\"text-center font-weight-bold display-5\">No data found</p>\r\n            ) : (\r\n              <div>\r\n              \r\n                <div className=\"weather-detail\">\r\n                  <div className=\"place-detail d-flex flex-column justify-content-center align-items-center\">\r\n                    <h1 className=\"head\" id=\"place\">\r\n                      <i className=\"fas fa-thermometer-quarter\"></i>\r\n                      <span>\r\n                        {city},{country.country}\r\n                      </span>\r\n                    </h1>\r\n                    <p className=\"para\" id=\"time-detail\">\r\n                      {dayToday} | {month} {date} | {hour} :{minute} {period}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"temperature d-flex flex-column justify-content-center align-items-center\">\r\n                    <h1 className=\"head\" id=\"temp\">\r\n                      {temperature.temp} &deg;C\r\n                    </h1>\r\n                    <p className=\"para\" id=\"min-max\">\r\n                      Min-{temperature.temp_min}&deg;C | Max-{temperature.temp_max}&deg;C\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TempCard;\r\n","import React, { useState} from \"react\";\r\n\r\nimport TempCard from \"./Components/TempCard\";\r\n\r\nconst App = () => {\r\n\r\n// defining a state to store current time ,date and month.\r\n  const [now,setNow]=useState({\r\n    minute:\"\",\r\n    hour:\"\",\r\n    date:\"\",\r\n    month:\"\",\r\n    period:\"\",\r\n    dayToday:\"\"\r\n    }\r\n)\r\n\r\n// the updateDate function will be called in an interval of 1 second .It is defined to get the current date ,time and month.\r\n  const updateDate=()=>{\r\n          const date=new Date();\r\n          const days=[\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"]\r\n                let day= days[date.getDay()]\r\n\r\n                const months=[\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUNE\",\"JULY\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\"]\r\n                let mon=months[date.getMonth()]\r\n\r\n                let dateToday=date.getDate()\r\n\r\n                let hours=date.getHours()\r\n                let periodNow=\"AM\"\r\n                if(hours>11){\r\n                    periodNow=\"PM\"\r\n                }\r\n\r\n                if(hours>12){\r\n                    hours=hours-12\r\n\r\n                }\r\n\r\n                let min=date.getMinutes()\r\n                if(min<10){\r\n                    min=\"0\"+min\r\n                }\r\n\r\n          setNow((prevVal)=>{\r\n              prevVal.minute=min\r\n              prevVal.hour=hours\r\n              prevVal.date=dateToday\r\n              prevVal.month=mon\r\n              prevVal.dayToday=day\r\n              prevVal.period=periodNow\r\n\r\n              return{\r\n                  minute:prevVal.minute,\r\n                  hour:prevVal.hour,\r\n                  date:prevVal.date,\r\n                  month: prevVal.month,\r\n                  dayToday:prevVal.dayToday,\r\n                  period:prevVal.period\r\n              }\r\n            })\r\n\r\n      }\r\n\r\n      setInterval(updateDate, 1000);\r\n\r\n\r\n\r\n return (\r\n    <>\r\n     <TempCard  now={now}\r\n             \r\n             \r\n          />         \r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}